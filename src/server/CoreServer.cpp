// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PointStore.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::core;

class PointStoreHandler : virtual public PointStoreIf {
 public:
  PointStoreHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void getData(Data& _return, const zeonid_t id, const bool valuePresent) {
    // Your implementation goes here
    printf("getData\n");
  }

  void setData(const Data& data, const bool valuePresent) {
    // Your implementation goes here
    printf("setData\n");
  }

  void createData(const zeonid_t id, const Point& point, const int64_t timestamp, const std::string& value) {
    // Your implementation goes here
    printf("createData\n");
  }

  void getNearestKById(std::vector<Data> & _return, const zeonid_t id) {
    // Your implementation goes here
    printf("getNearestKById\n");
  }

  void getNearestKByPoint(std::vector<Data> & _return, const Point& point) {
    // Your implementation goes here
    printf("getNearestKByPoint\n");
  }

  void getPointsInRegion(std::vector<Data> & _return, const Region& region) {
    // Your implementation goes here
    printf("getPointsInRegion\n");
  }

  void removeData(const zeonid_t id) {
    // Your implementation goes here
    printf("removeData\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<PointStoreHandler> handler(new PointStoreHandler());
  shared_ptr<TProcessor> processor(new PointStoreProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

